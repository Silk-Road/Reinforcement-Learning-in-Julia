# encoding = utf-8
# Author: Silk-Road
# Date: 2021-01-01
# Email: swami.liu@outlook.com
# Last modified by: Silk-Road
# Last modified time: 2021-01-03

# mutable struct RLGlue
#     environment::Environment
#     agent::Agent
#     total_reward
#     last_action
#     num_steps
#     num_episodes
#     function RLGlue(env_class, agent_class)
#         rl_glue = new()
#         rl_glue.environment = env_class() #--------------------------------
#         rl_glue.agent = agent_class() #------------------------------------
#         rl_glue.total_reward = Nothing
#         rl_glue.last_action = Nothing
#         rl_glue.num_steps = Nothing
#         rl_glue.num_episodes = Nothing
#         rl_glue
#     end
# end
#
# function rl_init(rl_glue::RLGlue; agent_init_info = Dict(), env_init_info=Dict())
#     rl_glue.environment = env_init(rl_glue.environment, env_init_info) #--------------------
#     rl_glue.agent = agent_init(rl_glue.agent, agent_init_info) #---------------------------
#
#     rl_glue.total_reward = 0.0
#     rl_glue.num_steps = 0
#     rl_glue.num_epsisodes = 0
#     #return rl_glue #--------------------------------------------------------
# end
include("ten_arm_env.jl")
include("main_agent.jl")

"""RLGlue class

args:
    env_name (string): the name of the module where the Environment class can be found
    agent_name (string): the name of the module where the Agent class can be found
"""
mutable struct RLGlue
    environment::Environment
    agent#::Agent or GreedyAgent
    total_reward
    last_action
    num_steps
    num_epsisodes
    function RLGlue(env_class, agent_class; agent_init_info = Dict(), env_init_info = Dict())
        rl_glue = new()
        rl_glue.environment = env_class(env_info = env_init_info)
        rl_glue.agent = agent_init(agent_class(), agent_info = agent_init_info)
        rl_glue.total_reward = 0.0
        rl_glue.last_action = nothing
        rl_glue.num_steps = 0
        rl_glue.num_epsisodes = 0
        rl_glue
    end
end

"""Starts RLGlue experiment

Returns:
    tuple: (state, action)
"""
function rl_start(rl_glue::RLGlue; agent_start_info = Dict(), env_init_info = Dict())
    last_state = env_start(rl_glue.environment)
    rl_glue.last_action = agent_start(rl_glue.agent, last_state)
    observation = (last_state, rl_glue.last_action)
    return observation
end

"""Starts the agent.

Args:
    observation: The first observation from the environment

Returns:
    The action taken by the agent.
"""
function rl_agent_start(rl_glue::RLGlue, observation)
    return agent_start(rl_glue.agent, observation)
end


"""Step taken by the agent

Args:
    reward (float): the last reward the agent received for taking the
        last action.
    observation : the state observation the agent receives from the
        environment.

Returns:
    The action taken by the agent.
"""
function rl_agent_step(rl_glue::RLGlue, reward, observation)
    return agent_step(rl_glue.agent, observation)
end


"""Run when the agent terminates

Args:
    reward (float): the reward the agent received when terminating
"""
function rl_agent_end(rl_glue::RLGlue, reward)
    agent_end(rl_glue.agent, reward)
end

"""Starts RL-Glue environment.

Returns:
    (float, state, Boolean): reward, state observation, boolean
        indicating termination
"""
function rl_env_start(rl_glue::RLGlue)
    rl_glue.total_reward = 0.0
    rl_glue.num_steps = 1

    this_observation = env_start(rl_glue.environment)
    return this_observation
end


"""Step taken by the environment based on action from agent

Args:
    action: Action taken by agent.

Returns:
    (float, state, Boolean): reward, state observation, boolean
        indicating termination.
"""
function rl_env_step(rl_glue::RLGlue, action)
    ro = env_step(rl_glue.environment)
    (this_reward, _, terminal) = ro

    rl_glue.total_reward += this_reward

    if terminal
        rl_glue.num_epsisodes += 1
    else
        rl_glue.num_steps += 1
    end
    return ro
end


"""Step taken by RLGlue, takes environment step and either step or
    end by agent.

Returns:
    (float, state, action, Boolean): reward, last state observation,
        last action, boolean indicating termination
"""
function rl_step(rl_glue::RLGlue)
    (reward, last_state, term) = env_step(rl_glue.environment, rl_glue.last_action)

    rl_glue.total_reward += reward;

    if term
        rl_glue.num_episodes += 1
        agent_end(rl_glue.agent, reward)
        roat = (reward, last_state, nothing, term)
    else
        rl_glue.num_steps += 1
        rl_glue.last_action = agent_step(rl_glue.agent, reward, last_state)
        roat = (reward, last_state, rl_glue.last_action, term)
    end
    return roat
end

"""Cleanup done at end of experiment."""
function rl_cleanup(rl_glue::RLGlue)
    env_cleanup(rl_glue.environment)
    agent_cleanup(rl_glue.agent)
end


"""Message passed to communicate with agent during experiment

Args:
    message: the message (or question) to send to the agent

Returns:
    The message back (or answer) from the agent

"""
function rl_agent_message(rl_glue::RLGlue, message)
    return agent_message(rl_glue.agent, message)
end


"""Message passed to communicate with environment during experiment

Args:
    message: the message (or question) to send to the environment

Returns:
    The message back (or answer) from the environment

"""
function rl_env_message(rl_glue, message)
    return rl_glue.environment.env_message(message)
end

"""Runs an RLGlue episode

Args:
    max_steps_this_episode (Int): the maximum steps for the experiment to run in an episode

Returns:
    Boolean: if the episode should terminate
"""
function rl_episode(rl_glue::RLGlue, max_steps_this_epsisode)
    is_terminal = false
    rl_start(rl_glue)

    while (!is_terminal) && ((max_steps_this_epsisode==0) || (rl_glue.num_steps < max_steps_this_epsisode))
        rl_step_result = rl_glue.rl_step()
        is_terminal = rl_step_result[4]
    end
    return is_terminal
end

"""The total reward

Returns:
    float: the total reward
"""
function rl_return(rl_glue::RLGlue)
    return rl_glue.total_reward
end

"""The total number of steps taken

Returns:
    Int: the total number of steps taken
"""
function rl_num_steps(rl_glue::RLGlue)
    return rl_glue.num_steps
end

"""The number of episodes

Returns
    Int: the total number of episodes

"""
function rl_num_episodes(rl_glue::RLGlue)
    return rl_glue.num_episodes
end
