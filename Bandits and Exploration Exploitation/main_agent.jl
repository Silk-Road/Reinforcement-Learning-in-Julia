# encoding = utf-8
# Author: Silk-Road
# Date: 2021-01-01
# Email: swami.liu@outlook.com
# Last modified by: Silk-Road
# Last modified time: 2021-01-03
using StatsBase

abstract type BaseAgent end

"""agent does *no* learning, selects action 0 always"""
mutable struct Agent<:BaseAgent
    last_action
    num_actions
    q_values
    step_size
    epsilon
    initial_value
    arm_count
    function Agent(;last_action = nothing, num_actions = nothing, q_values = nothing,
                   step_size = nothing, epsilon = nothing,
                   initial_value=0.0, arm_count=zeros(10))
        agent = new()
        agent.last_action=last_action
        agent.num_actions = num_actions
        agent.q_values = q_values
        agent.step_size = step_size
        agent.epsilon = epsilon
        agent.initial_value = initial_value
        agent.arm_count = arm_count
        agent
    end
end

"""Setup for the agent called when the experiment first starts."""
function agent_init(agent::Agent; agent_info=Dict())
    agent.num_actions = get(agent_info, "num_actions", 2)
    agent.initial_value = get(agent_info, "initial_value", 0.0)
    agent.q_values = ones(get(agent_info, "num_actions", 2))*agent.initial_value
    agent.step_size = get(agent_info, "step_size", 0.1)
    agent.epsilon = get(agent_info, "epsilon", 0.0)
    agent.last_action = 0
    return agent
end

#agent_init(Agent())

"""The first method called when the experiment starts, called after
the environment starts.
Args:
    observation (Numpy array): the state observation from the
        environment's evn_start function.
Returns:
    The first action the agent takes.
"""
function agent_start(agent::Agent, observation)
    # StatsBase:sample == np.random.choice
    agent.last_action = sample(1:agent.num_actions) # set first action to 0
    return agent.last_action
end


"""The first method called when the experiment starts, called after
the environment starts.
Args:
    observation (Numpy array): the state observation from the
        environment's evn_start function.
Returns:
    The first action the agent takes.
"""
#function agent_step(agent::Agent, reward, observation)
function agent_step(agent::Agent, reward)
    # local_action = 0 # choose the action here
    agent.last_action = sample(agent.num_actions)
    return agent.last_action
end


"""Run when the agent terminates.
Args:
    reward (float): the reward the agent received for entering the
        terminal state.
"""
function agent_end(agent::Agent, reward)
end


"""Cleanup done after the agent ends."""
function agent_cleanup(agent::Agent)
end

"""A function used to pass information from the agent to the experiment.
Args:
    message: The message passed to the agent.
Returns:
    The response (or answer) to the message.
"""
function agent_message(agent::Agent, message)
end
