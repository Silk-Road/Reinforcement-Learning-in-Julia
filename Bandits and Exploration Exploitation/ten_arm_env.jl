# encoding = utf-8
# Author: Silk-Road
# Date: 2021-01-01
# Email: swami.liu@outlook.com
# Last modified by: Silk-Road
# Last modified time: 2021-01-03

using Random
using StatsBase
using Distributions
abstract type BaseEnvironment end

"""Implements the environment for an RLGlue environment

Note:
    env_init, env_start, env_step, env_cleanup, and env_message are required
    methods.
"""
mutable struct Environment <: BaseEnvironment
    reward
    observation
    termination
    reward_obs_term
    count
    arms
    seed
    function Environment(;reward=0.0, observation=0, termination=false, count = 0,
        arms = randn(10), env_info=Dict())
        environment = new()
        environment.reward = reward
        environment.observation = observation
        environment.termination = termination
        environment.reward_obs_term = (reward, observation, termination)
        environment.count = count
        environment.arms = arms
        environment.seed = get(env_info, "random_seed", 123)
        environment
    end
end


"""The first method called when the experiment starts, called before the
agent starts.

Returns:
    The first state observation from the environment.
"""
function env_start(env::Environment)
    return env.reward_obs_term[2]
end

"""A step taken by the environment.

Args:
    action: The action taken by the agent

Returns:
    (float, state, Boolean): a tuple of the reward, state observation,
        and boolean indicating if it's terminal.
"""
function env_step(env::Environment, action)
    # if action == 0
    #     if rand() < 0.2 #------------------------------
    #         reward = 14
    #     else
    #         reward = 6
    #     end
    # end
    # if action == 1
    #     reward = sample(10:13)
    # end
    # if action == 2
    #     if rand() < 0.8
    #         reward = 174
    #     else
    #         reward = 7
    #     end
    # end
    #
    # reward = rand(Normal(env.arms[action], 1.0))

    reward = env.arms[action] + randn()
    obs = env.reward_obs_term[2]
    env.reward_obs_term = (reward, obs, false)
    return env.reward_obs_term
end

"""Cleanup done after the environment ends"""
function env_cleanup(env::Environment)
end

"""A message asking the environment for information

Args:
    message (string): the message passed to the environment

Returns:
    string: the response (or answer) to the message
"""
function env_message(env::Environment, message)
    if message == "what is the current reward?"
        return "$(env.reward_obs_term[1])"
    end
    return "I don't know how to respond to your message"
end
